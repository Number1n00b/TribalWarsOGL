TODO LIST:
NAMING CONVENTION:
    Files and Classes: CamelCase
    Variables/Parameters: under_scores
    Functions: under_scores OR CamelCalse


====== New ======
Find a better way to handle catalogues. Currently all the prettyNames for the
textures, meshes and shaders are hard coded meaning I have to remember them
all the time, is there a better way?

I should also report errors when lookup fails, i.e shader_catalogue["test"]
does not exist... Currently this will result in null pointers and possibly
undefined behaviour.

Solution = Create my own catalogue class.

=================

- Re-structure the way I handle input.  Right now I use observer as well as global
    keydown list. Decide on a more consistant way.

- Stop using globals for Display, Camera etc, no need for that anymore.

- Rewrite what is not mine, or use other, industry standard, free libaries (obj_loader)

- Restructure main into an app class with all the variables required, use main to initialise and start the app class.

- Make 'escape' toggle a pause menu, during the pause menu the mouse is NOT clipped to the screen. else it is.

- Sound

- Load .mtl files and learn how to use them.

- Fix camera movement jitter / stuttering and check why normalise sometimes returns NAN in camera.
    This is due to the update being called at irregular intervals. Having a fixed - timestep loop in main would fix this issue.
    (Linear interpolation).

- Make cross platform with ifdef guards fow windows and others.

- Make UI draw a list of elements, in priority order instead of RenderText by itself.

- Have loading of objects and UI elements be done from text files.
    - Enable objects and UI elements to be written/read to and from text files.


- Decide how to deal with loading textures and meshes, should I load them all
    on startup, or should I only load them when required?

- Use text to make buttons. (Command pattern)
